syntax = "proto3";

option java_multiple_files = true;
option java_outer_classname = "DijkstraProto";
option objc_class_prefix = "DIJ";

package dijkstra;

// The length service definition.
service DijkstraMainWorker {
  // Sends a greeting
  rpc hello_and_get_sector (Address) returns (SectorReply) {}
  rpc job_stream (Address) returns (stream Job) {}
  rpc path_found (stream PathVert) returns (Ok) {}
}

service DijkstraWorkerService {
  rpc new_region_entry (stream Entry) returns (JobEnd) {}
  rpc send_path (stream PathVert) returns (Ok) {} 
}


message Ok { 
}

message PathVert {
  bool isLastVert = 1; //0 if not last vert, 1 if last vert
  int64 distance = 2;
  int32 ver_id = 3;
}

// The request containing path length query.
message Address {
  string v1 = 1;
}

// The response message containing length of edge.
message SectorReply {
  int32 sector_num = 1;
}


message Job { //@TODO packit  
  int32 type_of_job = 1;  //0 for starters, 1 for being in the middle, @TODO change for some enum
  int32 start_vertex = 2; // used for starters only
  int32 end_vertex = 3; 
  int32 end_vertex_region = 4;
  int32 job_id = 5;
}

message Entry {
  int32 distance = 1;
  int32 last_vertex_in_prev_reg = 2;
  int32 first_vertex_in_curr_reg = 3;
  int32 last_region = 4;
  int32 job_id = 5;
}

message JobEnd {
  string siema = 1; //@TODO  
}
