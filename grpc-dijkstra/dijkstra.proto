syntax = "proto3";
package dijkstra;

option java_multiple_files = true;
option java_outer_classname = "DijkstraProto";
option objc_class_prefix = "DIJ";

//TODO: "Query" vs "Request", "Reply" vs "Response"

// Checks legality of vertices in the request
service QueryVerificator {
  rpc Verify (ShortestPathQuery) returns (QueryVerificatorReply);
}

service Router {
  rpc Route (ShortestPathQuery) returns (RouterReply);
}

service RegionProcessor {
  rpc Dijkstra (DijkstraQuery) returns (DijkstraReply);
}

message ShortestPathQuery {
  int32 src_vertex = 1;
  int32 dst_vertex = 2;
}

message QueryVerificatorReply {
  bool is_valid = 1;
}

message RouterReply {
  int32 first_processor_id = 1;
}

message DijkstraQuery {
  bool is_first_processor = 1;
  int32 src_vertex = 2;
  int32 dst_vertex = 3;
};

message DijkstraReply {
  repeated int32 path = 1;
  int32 dist = 2;
}
